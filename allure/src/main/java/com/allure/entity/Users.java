 package com.allure.entity;
// Generated 18 Sep, 2021 10:44:47 AM by Hibernate Tools 5.2.10.Final

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

import lombok.Getter;
import lombok.Setter;

/**
 * Users generated by hbm2java
 */
@Entity
@Table(name = "users", catalog = "db_allure", uniqueConstraints = @UniqueConstraint(columnNames = "username"))
@Getter
@Setter
public class Users extends BaseEntity implements java.io.Serializable {

	private static final long serialVersionUID = 521975904944365759L;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "body_type")
	private ListBodyType listBodyType;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "drinking")
	private ListDrinkingHabit listDrinkingHabit;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "education_level")
	private ListEducationLevel listEducationLevel;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ethnicity")
	private ListEthnicity listEthnicity;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "eye_color")
	private ListEyeColor listEyeColor;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "gender")
	private ListGender listGender;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "hair_color")
	private ListHairColor listHairColor;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "religion")
	private ListReligion listReligion;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "smoking")
	private ListSmokingHabit listSmokingHabit;
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "relationship_status")
	private RelationshipStatus relationshipStatus;
	
	@Column(name = "full_name")
	private String fullName;
	
	@Column(name = "email")
	private String email;
	
	@Column(name = "username", unique = true, length = 45)
	private String username;
	
	@Column(name = "password")
	private String password;
	
	@Column(name = "mobile", length = 15)
	private String mobile;
	
	@Column(name = "otp")
	private Integer otp;
	
	@Column(name = "otp_verified", nullable = false)
	private boolean otpVerified;
	
	@Column(name = "facebook_id")
	private String facebookId;
	
	@Column(name = "google_id")
	private String googleId;
	
	@Column(name = "login_type", nullable = false)
	private int loginType;
	
	@Temporal(TemporalType.DATE)
	@Column(name = "dob", length = 10)
	private Date dob;
	
	@Column(name = "show_gender", nullable = false)
	private boolean showGender;
	
	@Temporal(TemporalType.DATE)
	@Column(name = "clean_date", length = 10)
	private Date cleanDate;
	
	@Column(name = "show_sexual_orientations", nullable = false)
	private boolean showSexualOrientations;
	
	@Column(name = "interest", nullable = false, length = 6)
	private String interest;
	
	@Column(name = "loc_lattitude", precision = 9, scale = 6)
	private Double locLattitude;
	
	@Column(name = "loc_longitude", precision = 9, scale = 6)
	private Double locLongitude;
	
	@Column(name = "aboutMe", length = 200)
	private String aboutMe;
	
	@Column(name = "living_in", length = 45)
	private String livingIn;
	
	@Column(name = "job_title", length = 45)
	private String jobTitle;
	
	@Column(name = "company_name", length = 100)
	private String companyName;
	
	@Column(name = "university", length = 100)
	private String university;
	
	@Column(name = "height", precision = 6)
	private Double height;
	
	@Column(name = "acc_status", nullable = false)
	private boolean accStatus;

	@Column(name = "is_registered", nullable = false)
	private boolean isRegistered;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "inactive_till", length = 19)
	private Date inactiveTill;
	
	@Column(name = "is_profile_completed", nullable = false)
	private boolean isProfileCompleted;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "login_at", length = 19)
	private Date loginAt;

	@Column(name = "created_by")
	private Integer createdBy;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", length = 19)
	private Date createdAt;
	
	@Column(name = "updated_by")
	private Integer updatedBy;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at", length = 19)
	private Date updatedAt;
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_activity", length = 19)
	private Date lastActivity;
		
	@OneToMany(fetch=FetchType.LAZY, mappedBy="users")
	private List<UserSexualOrientations> userSexualOrientations;
	
	@OneToMany(fetch=FetchType.LAZY, mappedBy="users")	
	private List<UserPassions> userPassions;
}
